/**
 * Logger - Module ghi log cho ·ª©ng d·ª•ng
 * 
 * Cung c·∫•p c√°c h√†m ghi log ƒë·ªìng nh·∫•t tr√™n to√†n ·ª©ng d·ª•ng
 * v·ªõi kh·∫£ nƒÉng ph√¢n bi·ªát m√¥i tr∆∞·ªùng v√† m·ª©c ƒë·ªô nghi√™m tr·ªçng
 */

enum LogLevel {
  ERROR = 0,
  WARN = 1,
  INFO = 2,
  DEBUG = 3,
}

// C·∫•u h√¨nh m·ª©c log d·ª±a v√†o m√¥i tr∆∞·ªùng
const LOG_LEVEL = process.env.NODE_ENV === 'production' 
  ? LogLevel.INFO 
  : LogLevel.DEBUG;

// ƒê·ªãnh d·∫°ng timestamp
const timestamp = () => {
  return new Date().toISOString().replace('T', ' ').substring(0, 19);
};

/**
 * Ghi log debug - ch·ªâ hi·ªÉn th·ªã trong m√¥i tr∆∞·ªùng ph√°t tri·ªÉn
 * @param message Th√¥ng ƒëi·ªáp log
 * @param data D·ªØ li·ªáu b·ªï sung (tu·ª≥ ch·ªçn)
 */
export function debug(message: string, data?: any): void {
  if (LOG_LEVEL >= LogLevel.DEBUG) {
    if (data) {
      console.log(`[${timestamp()}] üîç DEBUG: ${message}`, data);
    } else {
      console.log(`[${timestamp()}] üîç DEBUG: ${message}`);
    }
  }
}

/**
 * Ghi log th√¥ng tin chung
 * @param message Th√¥ng ƒëi·ªáp log
 * @param data D·ªØ li·ªáu b·ªï sung (tu·ª≥ ch·ªçn)
 */
export function info(message: string, data?: any): void {
  if (LOG_LEVEL >= LogLevel.INFO) {
    if (data) {
      console.log(`[${timestamp()}] ‚ÑπÔ∏è INFO: ${message}`, data);
    } else {
      console.log(`[${timestamp()}] ‚ÑπÔ∏è INFO: ${message}`);
    }
  }
}

/**
 * Ghi log c·∫£nh b√°o
 * @param message Th√¥ng ƒëi·ªáp log
 * @param data D·ªØ li·ªáu b·ªï sung (tu·ª≥ ch·ªçn)
 */
export function warn(message: string, data?: any): void {
  if (LOG_LEVEL >= LogLevel.WARN) {
    if (data) {
      console.log(`[${timestamp()}] ‚ö†Ô∏è WARN: ${message}`, data);
    } else {
      console.log(`[${timestamp()}] ‚ö†Ô∏è WARN: ${message}`);
    }
  }
}

/**
 * Ghi log l·ªói
 * @param message Th√¥ng ƒëi·ªáp log
 * @param error ƒê·ªëi t∆∞·ª£ng l·ªói (tu·ª≥ ch·ªçn)
 */
export function error(message: string, error?: any): void {
  if (LOG_LEVEL >= LogLevel.ERROR) {
    if (error && error instanceof Error) {
      console.error(`[${timestamp()}] ‚ùå ERROR: ${message}`, {
        message: error.message,
        stack: error.stack,
      });
    } else if (error) {
      console.error(`[${timestamp()}] ‚ùå ERROR: ${message}`, error);
    } else {
      console.error(`[${timestamp()}] ‚ùå ERROR: ${message}`);
    }
  }
}

export default {
  debug,
  info,
  warn,
  error,
};